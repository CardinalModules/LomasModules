#include "plugin.hpp"

// Envelope shape Look up tables
static const float env_quartic[256] = {0.000000f,0.000000f,0.000000f,0.000002f,0.000004f,0.000008f,0.000013f,0.000021f,0.000031f,0.000044f,0.000060f,0.000080f,0.000104f,0.000132f,0.000165f,0.000204f,0.000247f,0.000296f,0.000352f,0.000414f,0.000482f,0.000559f,0.000642f,0.000734f,0.000834f,0.000942f,0.001060f,0.001187f,0.001324f,0.001471f,0.001628f,0.001797f,0.001976f,0.002167f,0.002370f,0.002586f,0.002814f,0.003055f,0.003309f,0.003577f,0.003860f,0.004157f,0.004468f,0.004795f,0.005137f,0.005496f,0.005870f,0.006261f,0.006670f,0.007095f,0.007539f,0.008000f,0.008480f,0.008979f,0.009496f,0.010034f,0.010591f,0.011169f,0.011767f,0.012386f,0.013027f,0.013689f,0.014373f,0.015080f,0.015810f,0.016562f,0.017338f,0.018139f,0.018963f,0.019812f,0.020686f,0.021585f,0.022510f,0.023461f,0.024439f,0.025443f,0.026474f,0.027533f,0.028620f,0.029735f,0.030878f,0.032050f,0.033252f,0.034484f,0.035745f,0.037037f,0.038360f,0.039713f,0.041099f,0.042516f,0.043965f,0.045447f,0.046962f,0.048510f,0.050091f,0.051707f,0.053357f,0.055042f,0.056762f,0.058517f,0.060309f,0.062136f,0.064000f,0.065901f,0.067839f,0.069815f,0.071829f,0.073881f,0.075972f,0.078101f,0.080271f,0.082480f,0.084729f,0.087019f,0.089350f,0.091722f,0.094135f,0.096591f,0.099089f,0.101630f,0.104213f,0.106840f,0.109511f,0.112226f,0.114986f,0.117790f,0.120640f,0.123535f,0.126476f,0.129464f,0.132498f,0.135579f,0.138708f,0.141884f,0.145109f,0.148382f,0.151704f,0.155075f,0.158495f,0.161966f,0.165487f,0.169058f,0.172681f,0.176355f,0.180081f,0.183858f,0.187689f,0.191572f,0.195508f,0.199498f,0.203542f,0.207640f,0.211792f,0.216000f,0.220263f,0.224582f,0.228957f,0.233388f,0.237876f,0.242421f,0.247024f,0.251685f,0.256404f,0.261181f,0.266018f,0.270914f,0.275870f,0.280885f,0.285961f,0.291098f,0.296296f,0.301556f,0.306877f,0.312261f,0.317707f,0.323217f,0.328789f,0.334425f,0.340126f,0.345890f,0.351720f,0.357615f,0.363575f,0.369601f,0.375693f,0.381852f,0.388077f,0.394370f,0.400731f,0.407160f,0.413657f,0.420223f,0.426858f,0.433562f,0.440336f,0.447181f,0.454096f,0.461082f,0.468139f,0.475268f,0.482469f,0.489742f,0.497088f,0.504507f,0.512000f,0.519566f,0.527207f,0.534922f,0.542712f,0.550577f,0.558518f,0.566535f,0.574628f,0.582798f,0.591045f,0.599370f,0.607772f,0.616252f,0.624811f,0.633449f,0.642166f,0.650963f,0.659840f,0.668797f,0.677834f,0.686953f,0.696153f,0.705435f,0.714799f,0.724246f,0.733775f,0.743388f,0.753084f,0.762864f,0.772729f,0.782678f,0.792712f,0.802832f,0.813037f,0.823329f,0.833706f,0.844171f,0.854723f,0.865363f,0.876090f,0.886906f,0.897811f,0.908804f,0.919887f,0.931060f,0.942322f,0.953675f,0.965119f,0.976655f,0.988281f,1.000000f};
static const float env_linear[256] = {0.000000f,0.003922f,0.007843f,0.011765f,0.015686f,0.019608f,0.023529f,0.027451f,0.031373f,0.035294f,0.039216f,0.043137f,0.047059f,0.050980f,0.054902f,0.058824f,0.062745f,0.066667f,0.070588f,0.074510f,0.078431f,0.082353f,0.086275f,0.090196f,0.094118f,0.098039f,0.101961f,0.105882f,0.109804f,0.113725f,0.117647f,0.121569f,0.125490f,0.129412f,0.133333f,0.137255f,0.141176f,0.145098f,0.149020f,0.152941f,0.156863f,0.160784f,0.164706f,0.168627f,0.172549f,0.176471f,0.180392f,0.184314f,0.188235f,0.192157f,0.196078f,0.200000f,0.203922f,0.207843f,0.211765f,0.215686f,0.219608f,0.223529f,0.227451f,0.231373f,0.235294f,0.239216f,0.243137f,0.247059f,0.250980f,0.254902f,0.258824f,0.262745f,0.266667f,0.270588f,0.274510f,0.278431f,0.282353f,0.286275f,0.290196f,0.294118f,0.298039f,0.301961f,0.305882f,0.309804f,0.313725f,0.317647f,0.321569f,0.325490f,0.329412f,0.333333f,0.337255f,0.341176f,0.345098f,0.349020f,0.352941f,0.356863f,0.360784f,0.364706f,0.368627f,0.372549f,0.376471f,0.380392f,0.384314f,0.388235f,0.392157f,0.396078f,0.400000f,0.403922f,0.407843f,0.411765f,0.415686f,0.419608f,0.423529f,0.427451f,0.431373f,0.435294f,0.439216f,0.443137f,0.447059f,0.450980f,0.454902f,0.458824f,0.462745f,0.466667f,0.470588f,0.474510f,0.478431f,0.482353f,0.486275f,0.490196f,0.494118f,0.498039f,0.501961f,0.505882f,0.509804f,0.513725f,0.517647f,0.521569f,0.525490f,0.529412f,0.533333f,0.537255f,0.541176f,0.545098f,0.549020f,0.552941f,0.556863f,0.560784f,0.564706f,0.568627f,0.572549f,0.576471f,0.580392f,0.584314f,0.588235f,0.592157f,0.596078f,0.600000f,0.603922f,0.607843f,0.611765f,0.615686f,0.619608f,0.623529f,0.627451f,0.631373f,0.635294f,0.639216f,0.643137f,0.647059f,0.650980f,0.654902f,0.658824f,0.662745f,0.666667f,0.670588f,0.674510f,0.678431f,0.682353f,0.686275f,0.690196f,0.694118f,0.698039f,0.701961f,0.705882f,0.709804f,0.713725f,0.717647f,0.721569f,0.725490f,0.729412f,0.733333f,0.737255f,0.741176f,0.745098f,0.749020f,0.752941f,0.756863f,0.760784f,0.764706f,0.768627f,0.772549f,0.776471f,0.780392f,0.784314f,0.788235f,0.792157f,0.796078f,0.800000f,0.803922f,0.807843f,0.811765f,0.815686f,0.819608f,0.823529f,0.827451f,0.831373f,0.835294f,0.839216f,0.843137f,0.847059f,0.850980f,0.854902f,0.858824f,0.862745f,0.866667f,0.870588f,0.874510f,0.878431f,0.882353f,0.886275f,0.890196f,0.894118f,0.898039f,0.901961f,0.905882f,0.909804f,0.913725f,0.917647f,0.921569f,0.925490f,0.929412f,0.933333f,0.937255f,0.941176f,0.945098f,0.949020f,0.952941f,0.956863f,0.960784f,0.964706f,0.968627f,0.972549f,0.976471f,0.980392f,0.984314f,0.988235f,0.992157f,0.996078f,1.000000f};
static const float env_exponential[256] = {0.000000f,0.012309f,0.024473f,0.036496f,0.048377f,0.060120f,0.071725f,0.083195f,0.094531f,0.105734f,0.116806f,0.127748f,0.138563f,0.149251f,0.159814f,0.170253f,0.180570f,0.190767f,0.200844f,0.210804f,0.220647f,0.230375f,0.239989f,0.249491f,0.258881f,0.268162f,0.277334f,0.286399f,0.295358f,0.304212f,0.312963f,0.321611f,0.330158f,0.338605f,0.346954f,0.355204f,0.363359f,0.371417f,0.379382f,0.387253f,0.395033f,0.402721f,0.410320f,0.417829f,0.425251f,0.432586f,0.439835f,0.446999f,0.454080f,0.461078f,0.467994f,0.474829f,0.481584f,0.488260f,0.494858f,0.501379f,0.507823f,0.514192f,0.520487f,0.526708f,0.532857f,0.538933f,0.544938f,0.550873f,0.556739f,0.562536f,0.568265f,0.573928f,0.579524f,0.585054f,0.590520f,0.595922f,0.601261f,0.606537f,0.611752f,0.616906f,0.621999f,0.627033f,0.632008f,0.636925f,0.641784f,0.646586f,0.651333f,0.656023f,0.660659f,0.665241f,0.669769f,0.674244f,0.678667f,0.683038f,0.687358f,0.691627f,0.695847f,0.700017f,0.704138f,0.708211f,0.712237f,0.716215f,0.720147f,0.724033f,0.727873f,0.731669f,0.735420f,0.739127f,0.742791f,0.746412f,0.749991f,0.753528f,0.757023f,0.760478f,0.763892f,0.767267f,0.770601f,0.773897f,0.777154f,0.780374f,0.783555f,0.786699f,0.789807f,0.792878f,0.795913f,0.798913f,0.801878f,0.804808f,0.807703f,0.810565f,0.813394f,0.816189f,0.818952f,0.821682f,0.824380f,0.827047f,0.829683f,0.832288f,0.834862f,0.837406f,0.839921f,0.842406f,0.844862f,0.847289f,0.849688f,0.852059f,0.854402f,0.856717f,0.859006f,0.861268f,0.863503f,0.865713f,0.867896f,0.870054f,0.872186f,0.874294f,0.876377f,0.878436f,0.880470f,0.882481f,0.884468f,0.886433f,0.888374f,0.890292f,0.892188f,0.894062f,0.895913f,0.897744f,0.899552f,0.901340f,0.903107f,0.904853f,0.906578f,0.908284f,0.909969f,0.911635f,0.913281f,0.914908f,0.916517f,0.918106f,0.919676f,0.921229f,0.922763f,0.924279f,0.925777f,0.927258f,0.928722f,0.930168f,0.931598f,0.933011f,0.934407f,0.935787f,0.937151f,0.938499f,0.939831f,0.941147f,0.942448f,0.943734f,0.945005f,0.946261f,0.947502f,0.948729f,0.949942f,0.951140f,0.952324f,0.953495f,0.954651f,0.955795f,0.956924f,0.958041f,0.959145f,0.960235f,0.961313f,0.962378f,0.963431f,0.964472f,0.965500f,0.966516f,0.967521f,0.968513f,0.969495f,0.970464f,0.971422f,0.972369f,0.973305f,0.974230f,0.975145f,0.976048f,0.976941f,0.977824f,0.978696f,0.979558f,0.980410f,0.981252f,0.982084f,0.982906f,0.983719f,0.984522f,0.985316f,0.986100f,0.986876f,0.987642f,0.988399f,0.989148f,0.989888f,0.990619f,0.991341f,0.992055f,0.992761f,0.993458f,0.994148f,0.994829f,0.995502f,0.996168f,0.996825f,0.997475f,0.998118f,0.998752f,0.999380f,1.000000f};
static float const* const env_shapes_[4] = {env_quartic, env_linear, env_exponential};

struct LutEnvelope
{
    float process(float delta_time)
    {
        // Increment phase.
        phase_ += increment_[stage_] * delta_time;

        // Stage change.
        if (phase_ > 1.0f)
            setStage(stage_ + 1);

        // Interpolate between two envelope shapes. Quartic, Linear, Exponential.
        EnvShape shape_a = (EnvShape)shape_[stage_];
        EnvShape shape_b = (EnvShape)clamp(shape_[stage_] + 1, 0.f, 2.f);

        float position = crossfade(
                             interpolateLinear(env_shapes_[shape_a], phase_ * 255),
                             interpolateLinear(env_shapes_[shape_b], phase_ * 255),
                             fmod(shape_[stage_], 1.f));

        value_ = start_value_ + (target_level_[stage_] - start_value_) * position;

        return value_;
    }

    void tigger(bool reset)
    {
        if (reset) 
            value_ = 0; //  # for mono-style envelopes that are reset to 0 on new notes
        
        setStage(0);
    }

    void configureStage(int stage, float target_level, float increment, float shape)
    {
        target_level_[stage] = target_level;
        increment_[stage] = increment;
        shape_[stage] = shape;
    }

    void envelopeAD(float attack, float decay)
    {
        //           Stage  Level  Increment                                    Shape
        configureStage(0,   1.0f,  interpolateLinear(env_time_, attack * 255),  1.5f);     // Attack Linear / Exponential
        configureStage(1,   0.0f,  interpolateLinear(env_time_, decay  * 255),  1.99999f); // Decay  Exponential
        configureStage(2,   0.0f,  0.0f,                                        1.0f);     // Off    Linear
    }

    void envelopeHD(float hold, float decay)
    {
        //           Stage  Level  Increment                                   Shape
        configureStage(0,   1.0f,  4000,                                       1.0f);     // Attack Linear
        configureStage(1,   1.0f,  interpolateLinear(env_time_, hold * 255),   1.0f);     // Hold   Linear
        configureStage(2,   0.0f,  interpolateLinear(env_time_, decay * 255),  1.99999f); // Decay  Exponential
        configureStage(3,   0.0f,  0.0f,                                       1.0f);     // Off    Linear
    }

    // To set a segment time with a 0 to 1 input the envelope has to calculate
    // pow(max_time / min_time, segment_time) / min_time wich is expensive.
    // Set min and max time here updates the lookuptable.
    void setMinMaxTime(float min_time, float max_time)
    {
        // Update ToEnvTime lookup.
        for (size_t i = 0; i < 256; i++) {
            float t = (1.f/256.f) * i;
            env_time_[i] = ParamToEnvTime(t, min_time, max_time);
        }
    }

    // Converts from 0 to 1 to envelope increments.
    float ParamToEnvTime(float time, float min_time, float max_time) {
        return pow(max_time / min_time, -time) / min_time;
    }

    enum EnvShape { QUARTIC, LINEAR, EXPONENTIAL, NUM_ENV_SHAPES };

private:
	
    int stage_ = 0;
    float phase_ = 0;
    float value_ = 0;
    float start_value_ = 0;
    float target_level_[4] = {1.0f, 1.0f, 0.0f, 0.0f};
    float increment_[4]    = {1.0f, 1.0f, 1.0f, 0.0f};
    float shape_[4]        = {1.0f, 1.0f, 1.0f, 0.0f};

    // Envelope time from 1ms to 2 min. Middle is 1 seg. Last is infinite
    float env_time_[256] = {1000.000000f,947.061000f,896.924538f,849.442250f,804.473627f,761.885597f,721.552136f,683.353887f,647.177816f,612.916870f,580.469663f,549.740180f,520.637485f,493.075457f,466.972535f,442.251476f,418.839125f,396.666201f,375.667089f,355.779649f,336.945030f,319.107497f,302.214266f,286.215345f,271.063390f,256.713566f,243.123406f,230.252696f,218.063349f,206.519293f,195.586368f,185.232222f,175.426213f,166.139325f,157.344075f,149.014437f,141.125762f,133.654705f,126.579159f,119.878185f,113.531953f,107.521685f,101.829595f,96.438838f,91.333462f,86.498360f,81.919223f,77.582502f,73.475362f,69.585649f,65.901855f,62.413076f,59.108991f,55.979820f,53.016304f,50.209674f,47.551624f,45.034289f,42.650218f,40.392359f,38.254027f,36.228898f,34.310976f,32.494587f,30.774356f,29.145193f,27.602275f,26.141038f,24.757158f,23.446539f,22.205302f,21.029776f,19.916481f,18.862122f,17.863580f,16.917900f,16.022283f,15.174080f,14.370779f,13.610004f,12.889504f,12.207147f,11.560913f,10.948890f,10.369266f,9.820328f,9.300449f,8.808093f,8.341801f,7.900195f,7.481966f,7.085878f,6.710759f,6.355498f,6.019045f,5.700402f,5.398629f,5.112831f,4.842163f,4.585823f,4.343054f,4.113138f,3.895392f,3.689174f,3.493873f,3.308911f,3.133740f,2.967843f,2.810729f,2.661931f,2.521011f,2.387552f,2.261157f,2.141454f,2.028087f,1.920722f,1.819041f,1.722743f,1.631543f,1.545170f,1.463371f,1.385901f,1.312533f,1.243049f,1.177243f,1.114921f,1.055898f,1.000000f,1.000000f,0.957763f,0.917310f,0.878566f,0.841459f,0.805918f,0.771879f,0.739277f,0.708052f,0.678147f,0.649504f,0.622071f,0.595797f,0.570632f,0.546531f,0.523447f,0.501338f,0.480163f,0.459883f,0.440459f,0.421855f,0.404038f,0.386972f,0.370628f,0.354974f,0.339981f,0.325621f,0.311868f,0.298696f,0.286080f,0.273997f,0.262424f,0.251340f,0.240724f,0.230557f,0.220819f,0.211492f,0.202560f,0.194004f,0.185810f,0.177962f,0.170445f,0.163246f,0.156351f,0.149748f,0.143423f,0.137365f,0.131563f,0.126006f,0.120684f,0.115587f,0.110705f,0.106029f,0.101551f,0.097262f,0.093154f,0.089219f,0.085451f,0.081842f,0.078385f,0.075074f,0.071903f,0.068866f,0.065958f,0.063172f,0.060504f,0.057948f,0.055501f,0.053156f,0.050911f,0.048761f,0.046701f,0.044729f,0.042840f,0.041030f,0.039297f,0.037638f,0.036048f,0.034525f,0.033067f,0.031670f,0.030333f,0.029052f,0.027825f,0.026649f,0.025524f,0.024446f,0.023413f,0.022424f,0.021477f,0.020570f,0.019701f,0.018869f,0.018072f,0.017309f,0.016578f,0.015878f,0.015207f,0.014565f,0.013950f,0.013360f,0.012796f,0.012256f,0.011738f,0.011242f,0.010767f,0.010313f,0.009877f,0.009460f,0.009060f,0.008678f,0.008311f,0.007960f,0.007624f,0.007302f,0.006993f,0.006698f,0.006415f,0.006144f,0.005885f,0.005636f,0.005398f,0.005170f,0.004952f,0.004743f,0.004542f,0.004350f, 0.0f};// 0.004167f};

    void setStage(int newStage)
    {
        phase_ = 0.f;
        stage_ = newStage;
        start_value_ = value_;
    }
};


