#include "plugin.hpp"

const float MIN_TIME = 1e-3f; // 1 ms 0.001
const float MAX_TIME = 10.0f;
const float LAMBDA_BASE = MAX_TIME / MIN_TIME; // 1/0.001f = 1000

struct LutEnvelope
{
	float env_exponential[256] = {0.000000f, 0.012309f, 0.024473f, 0.036496f, 0.048377f, 0.060120f, 0.071725f, 0.083195f, 0.094531f, 0.105734f, 0.116806f, 0.127748f, 0.138563f, 0.149251f, 0.159814f, 0.170253f, 0.180570f, 0.190767f, 0.200844f, 0.210804f, 0.220647f, 0.230375f, 0.239989f, 0.249491f, 0.258881f, 0.268162f, 0.277334f, 0.286399f, 0.295358f, 0.304212f, 0.312963f, 0.321611f, 0.330158f, 0.338605f, 0.346954f, 0.355204f, 0.363359f, 0.371417f, 0.379382f, 0.387253f, 0.395033f, 0.402721f, 0.410320f, 0.417829f, 0.425251f, 0.432586f, 0.439835f, 0.446999f, 0.454080f, 0.461078f, 0.467994f, 0.474829f, 0.481584f, 0.488260f, 0.494858f, 0.501379f, 0.507823f, 0.514192f, 0.520487f, 0.526708f, 0.532857f, 0.538933f, 0.544938f, 0.550873f, 0.556739f, 0.562536f, 0.568265f, 0.573928f, 0.579524f, 0.585054f, 0.590520f, 0.595922f, 0.601261f, 0.606537f, 0.611752f, 0.616906f, 0.621999f, 0.627033f, 0.632008f, 0.636925f, 0.641784f, 0.646586f, 0.651333f, 0.656023f, 0.660659f, 0.665241f, 0.669769f, 0.674244f, 0.678667f, 0.683038f, 0.687358f, 0.691627f, 0.695847f, 0.700017f, 0.704138f, 0.708211f, 0.712237f, 0.716215f, 0.720147f, 0.724033f, 0.727873f, 0.731669f, 0.735420f, 0.739127f, 0.742791f, 0.746412f, 0.749991f, 0.753528f, 0.757023f, 0.760478f, 0.763892f, 0.767267f, 0.770601f, 0.773897f, 0.777154f, 0.780374f, 0.783555f, 0.786699f, 0.789807f, 0.792878f, 0.795913f, 0.798913f, 0.801878f, 0.804808f, 0.807703f, 0.810565f, 0.813394f, 0.816189f, 0.818952f, 0.821682f, 0.824380f, 0.827047f, 0.829683f, 0.832288f, 0.834862f, 0.837406f, 0.839921f, 0.842406f, 0.844862f, 0.847289f, 0.849688f, 0.852059f, 0.854402f, 0.856717f, 0.859006f, 0.861268f, 0.863503f, 0.865713f, 0.867896f, 0.870054f, 0.872186f, 0.874294f, 0.876377f, 0.878436f, 0.880470f, 0.882481f, 0.884468f, 0.886433f, 0.888374f, 0.890292f, 0.892188f, 0.894062f, 0.895913f, 0.897744f, 0.899552f, 0.901340f, 0.903107f, 0.904853f, 0.906578f, 0.908284f, 0.909969f, 0.911635f, 0.913281f, 0.914908f, 0.916517f, 0.918106f, 0.919676f, 0.921229f, 0.922763f, 0.924279f, 0.925777f, 0.927258f, 0.928722f, 0.930168f, 0.931598f, 0.933011f, 0.934407f, 0.935787f, 0.937151f, 0.938499f, 0.939831f, 0.941147f, 0.942448f, 0.943734f, 0.945005f, 0.946261f, 0.947502f, 0.948729f, 0.949942f, 0.951140f, 0.952324f, 0.953495f, 0.954651f, 0.955795f, 0.956924f, 0.958041f, 0.959145f, 0.960235f, 0.961313f, 0.962378f, 0.963431f, 0.964472f, 0.965500f, 0.966516f, 0.967521f, 0.968513f, 0.969495f, 0.970464f, 0.971422f, 0.972369f, 0.973305f, 0.974230f, 0.975145f, 0.976048f, 0.976941f, 0.977824f, 0.978696f, 0.979558f, 0.980410f, 0.981252f, 0.982084f, 0.982906f, 0.983719f, 0.984522f, 0.985316f, 0.986100f, 0.986876f, 0.987642f, 0.988399f, 0.989148f, 0.989888f, 0.990619f, 0.991341f, 0.992055f, 0.992761f, 0.993458f, 0.994148f, 0.994829f, 0.995502f, 0.996168f, 0.996825f, 0.997475f, 0.998118f, 0.998752f, 0.999380f, 1.000000f};
	float env_quartic[256] = {0.000000f, 0.000000f, 0.000000f, 0.000002f, 0.000004f, 0.000008f, 0.000013f, 0.000021f, 0.000031f, 0.000044f, 0.000060f, 0.000080f, 0.000104f, 0.000132f, 0.000165f, 0.000204f, 0.000247f, 0.000296f, 0.000352f, 0.000414f, 0.000482f, 0.000559f, 0.000642f, 0.000734f, 0.000834f, 0.000942f, 0.001060f, 0.001187f, 0.001324f, 0.001471f, 0.001628f, 0.001797f, 0.001976f, 0.002167f, 0.002370f, 0.002586f, 0.002814f, 0.003055f, 0.003309f, 0.003577f, 0.003860f, 0.004157f, 0.004468f, 0.004795f, 0.005137f, 0.005496f, 0.005870f, 0.006261f, 0.006670f, 0.007095f, 0.007539f, 0.008000f, 0.008480f, 0.008979f, 0.009496f, 0.010034f, 0.010591f, 0.011169f, 0.011767f, 0.012386f, 0.013027f, 0.013689f, 0.014373f, 0.015080f, 0.015810f, 0.016562f, 0.017338f, 0.018139f, 0.018963f, 0.019812f, 0.020686f, 0.021585f, 0.022510f, 0.023461f, 0.024439f, 0.025443f, 0.026474f, 0.027533f, 0.028620f, 0.029735f, 0.030878f, 0.032050f, 0.033252f, 0.034484f, 0.035745f, 0.037037f, 0.038360f, 0.039713f, 0.041099f, 0.042516f, 0.043965f, 0.045447f, 0.046962f, 0.048510f, 0.050091f, 0.051707f, 0.053357f, 0.055042f, 0.056762f, 0.058517f, 0.060309f, 0.062136f, 0.064000f, 0.065901f, 0.067839f, 0.069815f, 0.071829f, 0.073881f, 0.075972f, 0.078101f, 0.080271f, 0.082480f, 0.084729f, 0.087019f, 0.089350f, 0.091722f, 0.094135f, 0.096591f, 0.099089f, 0.101630f, 0.104213f, 0.106840f, 0.109511f, 0.112226f, 0.114986f, 0.117790f, 0.120640f, 0.123535f, 0.126476f, 0.129464f, 0.132498f, 0.135579f, 0.138708f, 0.141884f, 0.145109f, 0.148382f, 0.151704f, 0.155075f, 0.158495f, 0.161966f, 0.165487f, 0.169058f, 0.172681f, 0.176355f, 0.180081f, 0.183858f, 0.187689f, 0.191572f, 0.195508f, 0.199498f, 0.203542f, 0.207640f, 0.211792f, 0.216000f, 0.220263f, 0.224582f, 0.228957f, 0.233388f, 0.237876f, 0.242421f, 0.247024f, 0.251685f, 0.256404f, 0.261181f, 0.266018f, 0.270914f, 0.275870f, 0.280885f, 0.285961f, 0.291098f, 0.296296f, 0.301556f, 0.306877f, 0.312261f, 0.317707f, 0.323217f, 0.328789f, 0.334425f, 0.340126f, 0.345890f, 0.351720f, 0.357615f, 0.363575f, 0.369601f, 0.375693f, 0.381852f, 0.388077f, 0.394370f, 0.400731f, 0.407160f, 0.413657f, 0.420223f, 0.426858f, 0.433562f, 0.440336f, 0.447181f, 0.454096f, 0.461082f, 0.468139f, 0.475268f, 0.482469f, 0.489742f, 0.497088f, 0.504507f, 0.512000f, 0.519566f, 0.527207f, 0.534922f, 0.542712f, 0.550577f, 0.558518f, 0.566535f, 0.574628f, 0.582798f, 0.591045f, 0.599370f, 0.607772f, 0.616252f, 0.624811f, 0.633449f, 0.642166f, 0.650963f, 0.659840f, 0.668797f, 0.677834f, 0.686953f, 0.696153f, 0.705435f, 0.714799f, 0.724246f, 0.733775f, 0.743388f, 0.753084f, 0.762864f, 0.772729f, 0.782678f, 0.792712f, 0.802832f, 0.813037f, 0.823329f, 0.833706f, 0.844171f, 0.854723f, 0.865363f, 0.876090f, 0.886906f, 0.897811f, 0.908804f, 0.919887f, 0.931060f, 0.942322f, 0.953675f, 0.965119f, 0.976655f, 0.988281f, 1.000000f};

	float process(float delta_time)
	{
		if (increment_[stage_] >= 999.9f)
		{
			value_ = target_level_[stage_];
			changeStage(stage_ + 1);
			return value_;
		}

		phase_ += increment_[stage_] * delta_time;
		if (phase_ > 1.0f)
		{
			changeStage(stage_ + 1);
		}
		float position_ = interpolateLinear(env_exponential, phase_ * 255);
		value_ = start_value_ + (target_level_[stage_] - start_value_) * position_;

		return value_;
	}

	void changeStage(int newStage)
	{
		phase_ = 0;
		stage_ = newStage;
		start_value_ = value_;
	}

	void tigger()
	{
		value_ = 0; //  # for mono-style envelopes that are reset to 0 on new notes
		changeStage(0);
	}

	void configureHDenvelope(float holdIncrement, float decayIncrement)
	{
		target_level_[0] = 1.0f;
		target_level_[1] = 1.0f;
		target_level_[2] = 0.0f;
		target_level_[3] = 0.0f;
		
		increment_[0] = 1000.0f;
		increment_[1] = holdIncrement;
		increment_[2] = decayIncrement;
		increment_[3] = 0.0f;
		
	}
	
	void configureADenvelope(float attackIncrement, float decayIncrement)
	{
		target_level_[0] = 1.0f;
		target_level_[1] = 0.0f;
		target_level_[2] = 0.0f;
		
		increment_[0] = attackIncrement;
		increment_[1] = decayIncrement;
		increment_[2] = 0.0f;
	}

	void envelopeAD(float attack, float decay)
	{
		float attackLambda = pow(LAMBDA_BASE, -attack) / MIN_TIME;
		float decayLambda = pow(LAMBDA_BASE, -decay) / MIN_TIME;
		configureADenvelope(attackLambda, decayLambda);
	}
	
	void envelopeHD(float attack, float decay)
	{
		float attackLambda = pow(LAMBDA_BASE, -attack) / MIN_TIME;
		float decayLambda = pow(LAMBDA_BASE, -decay) / MIN_TIME;
		configureHDenvelope(attackLambda, decayLambda);
	}

	// Example of a AHR env  Attack   Hold   Release  End
	float target_level_[4] = {1.0f,   1.0f,  0.0f,    0.0f};
	float increment_[4]    = {1.0f,   1.0f,  1.0f,    0.0f};

	private:
	
	float start_value_ = 0;
	float value_ = 0;
	float phase_ = 0;
	int stage_ = 0;
};
